--- a/net/minecraft/server/PlayerInteractManager.java
+++ b/net/minecraft/server/PlayerInteractManager.java
@@ -2,6 +2,15 @@
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+// CraftBukkit start
+import java.util.ArrayList;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
+// CraftBukkit end
 
 public class PlayerInteractManager {
 
@@ -30,7 +39,7 @@
         this.gamemode = enumgamemode;
         enumgamemode.a(this.player.abilities);
         this.player.updateAbilities();
-        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[]{this.player}));
+        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[]{this.player}), this.player); // CraftBukkit
         this.world.everyoneSleeping();
     }
 
@@ -55,7 +64,7 @@
     }
 
     public void a() {
-        ++this.currentTick;
+        this.currentTick = MinecraftServer.currentTick; // CraftBukkit;
         IBlockData iblockdata;
 
         if (this.i) {
@@ -111,9 +120,31 @@
 
             if (packetplayinblockdig_enumplayerdigtype == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
                 if (!this.world.a((EntityHuman) this.player, blockposition)) {
+                    // CraftBukkit start - fire PlayerInteractEvent
+                    CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
                     this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
+                    // Update any tile entity data for this block
+                    TileEntity tileentity = world.getTileEntity(blockposition);
+                    if (tileentity != null) {
+                        this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                    }
+                    // CraftBukkit end
+                    return;
+                }
+
+                // CraftBukkit start
+                PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+                if (event.isCancelled()) {
+                    // Let the client know the block still exists
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    // Update any tile entity data for this block
+                    TileEntity tileentity = this.world.getTileEntity(blockposition);
+                    if (tileentity != null) {
+                        this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                    }
                     return;
                 }
+                // CraftBukkit end
 
                 if (this.isCreative()) {
                     if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
@@ -130,15 +161,49 @@
                     return;
                 }
 
-                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+                // this.world.douseFire((EntityHuman) null, blockposition, enumdirection); // CraftBukkit - Moved down
                 this.lastDigTick = this.currentTick;
                 float f = 1.0F;
 
                 iblockdata = this.world.getType(blockposition);
-                if (!iblockdata.isAir()) {
+                // CraftBukkit start - Swings at air do *NOT* exist.
+                if (event.useInteractedBlock() == Event.Result.DENY) {
+                    // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                    IBlockData data = this.world.getType(blockposition);
+                    if (data.getBlock() instanceof BlockDoor) {
+                        // For some reason *BOTH* the bottom/top part have to be marked updated.
+                        boolean bottom = data.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                    } else if (data.getBlock() instanceof BlockTrapdoor) {
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    }
+                } else if (!iblockdata.isAir()) {
                     iblockdata.attack(this.world, blockposition, this.player);
                     f = iblockdata.getDamage(this.player, this.player.world, blockposition);
+                    // Allow fire punching to be blocked
+                    this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+                }
+
+                if (event.useItemInHand() == Event.Result.DENY) {
+                    // If we 'insta destroyed' then the client needs to be informed.
+                    if (f > 1.0f) {
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    }
+                    return;
+                }
+                org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.player.inventory.getItemInHand(), f >= 1.0f);
+
+                if (blockEvent.isCancelled()) {
+                    // Let the client know the block still exists
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    return;
+                }
+
+                if (blockEvent.getInstaBreak()) {
+                    f = 2.0f;
                 }
+                // CraftBukkit end
 
                 if (!iblockdata.isAir() && f >= 1.0F) {
                     this.a(blockposition, packetplayinblockdig_enumplayerdigtype);
@@ -189,17 +254,73 @@
         if (this.breakBlock(blockposition)) {
             this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
         } else {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition)); // CraftBukkit - SPIGOT-5196
         }
 
     }
 
     public boolean breakBlock(BlockPosition blockposition) {
         IBlockData iblockdata = this.world.getType(blockposition);
+        // CraftBukkit start - fire BlockBreakEvent
+        org.bukkit.block.Block bblock = CraftBlock.at(world, blockposition);
+        BlockBreakEvent event = null;
+
+        if (this.player instanceof EntityPlayer) {
+            // Sword + Creative mode pre-cancel
+            boolean isSwordNoBreak = !this.player.getItemInMainHand().getItem().a(iblockdata, this.world, blockposition, (EntityHuman) this.player);
+
+            // Tell client the block is gone immediately then process events
+            // Don't tell the client if its a creative sword break because its not broken!
+            if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
+                packet.block = Blocks.AIR.getBlockData();
+                this.player.playerConnection.sendPacket(packet);
+            }
+
+            event = new BlockBreakEvent(bblock, this.player.getBukkitEntity());
+
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(isSwordNoBreak);
+
+            // Calculate default block experience
+            IBlockData nmsData = this.world.getType(blockposition);
+            Block nmsBlock = nmsData.getBlock();
+
+            ItemStack itemstack = this.player.getEquipment(EnumItemSlot.MAINHAND);
+
+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.player.hasBlock(nmsBlock.getBlockData())) {
+                event.setExpToDrop(nmsBlock.getExpDrop(nmsData, this.world, blockposition, itemstack));
+            }
+
+            this.world.getServer().getPluginManager().callEvent(event);
 
-        if (!this.player.getItemInMainHand().getItem().a(iblockdata, (World) this.world, blockposition, (EntityHuman) this.player)) {
+            if (event.isCancelled()) {
+                if (isSwordNoBreak) {
+                    return false;
+                }
+                // Let the client know the block still exists
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+
+                // Brute force all possible updates
+                for (EnumDirection dir : EnumDirection.values()) {
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
+                }
+
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.world.getTileEntity(blockposition);
+                if (tileentity != null) {
+                    this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                }
+                return false;
+            }
+        }
+        // CraftBukkit end
+
+        if (false && !this.player.getItemInMainHand().getItem().a(iblockdata, (World) this.world, blockposition, (EntityHuman) this.player)) { // CraftBukkit - false
             return false;
         } else {
+            iblockdata = this.world.getType(blockposition); // CraftBukkit - update state from plugins
+            if (iblockdata.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
             TileEntity tileentity = this.world.getTileEntity(blockposition);
             Block block = iblockdata.getBlock();
 
@@ -209,6 +330,10 @@
             } else if (this.player.a((World) this.world, blockposition, this.gamemode)) {
                 return false;
             } else {
+                // CraftBukkit start
+                org.bukkit.block.BlockState state = bblock.getState();
+                world.captureDrops = new ArrayList<>();
+                // CraftBukkit end
                 block.a((World) this.world, blockposition, iblockdata, (EntityHuman) this.player);
                 boolean flag = this.world.a(blockposition, false);
 
@@ -217,20 +342,33 @@
                 }
 
                 if (this.isCreative()) {
-                    return true;
+                    // return true; // CraftBukkit
                 } else {
                     ItemStack itemstack = this.player.getItemInMainHand();
                     boolean flag1 = this.player.hasBlock(iblockdata);
 
                     itemstack.a(this.world, iblockdata, blockposition, this.player);
-                    if (flag && flag1) {
+                    if (flag && flag1 && event.isDropItems()) { // CraftBukkit - Check if block should drop items
                         ItemStack itemstack1 = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
 
                         block.a(this.world, this.player, blockposition, iblockdata, tileentity, itemstack1);
                     }
 
-                    return true;
+                    // return true; // CraftBukkit
+                }
+                // CraftBukkit start
+                if (event.isDropItems()) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, world.captureDrops);
+                }
+                world.captureDrops = null;
+
+                // Drop event experience
+                if (flag && event != null) {
+                    iblockdata.getBlock().dropExperience(this.world, blockposition, event.getExpToDrop());
                 }
+
+                return true;
+                // CraftBukkit end
             }
         }
     }
@@ -272,12 +410,40 @@
         }
     }
 
+    // CraftBukkit start - whole method
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, MovingObjectPositionBlock movingobjectpositionblock) {
         BlockPosition blockposition = movingobjectpositionblock.getBlockPosition();
         IBlockData iblockdata = world.getType(blockposition);
+        EnumInteractionResult enuminteractionresult = EnumInteractionResult.PASS;
+        boolean cancelledBlock = false;
 
         if (this.gamemode == EnumGamemode.SPECTATOR) {
             ITileInventory itileinventory = iblockdata.b(world, blockposition);
+            cancelledBlock = !(itileinventory instanceof ITileInventory);
+        }
+
+        if (entityhuman.getCooldownTracker().hasCooldown(itemstack.getItem())) {
+            cancelledBlock = true;
+        }
+
+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, blockposition, movingobjectpositionblock.getDirection(), itemstack, cancelledBlock, enumhand);
+        firedInteract = true;
+        interactResult = event.useItemInHand() == Event.Result.DENY;
+
+        if (event.useInteractedBlock() == Event.Result.DENY) {
+            // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+            if (iblockdata.getBlock() instanceof BlockDoor) {
+                boolean bottom = iblockdata.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
+            } else if (iblockdata.getBlock() instanceof BlockCake) {
+                ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+            }
+            ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-2867
+            enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+        } else if (this.gamemode == EnumGamemode.SPECTATOR) {
+            ITileInventory itileinventory = iblockdata.b(world, blockposition);
 
             if (itileinventory != null) {
                 entityhuman.openContainer(itileinventory);
@@ -289,24 +455,26 @@
             boolean flag = !entityhuman.getItemInMainHand().isEmpty() || !entityhuman.getItemInOffHand().isEmpty();
             boolean flag1 = entityhuman.isSneaking() && flag;
 
-            if (!flag1 && iblockdata.interact(world, entityhuman, enumhand, movingobjectpositionblock)) {
-                return EnumInteractionResult.SUCCESS;
-            } else if (!itemstack.isEmpty() && !entityhuman.getCooldownTracker().hasCooldown(itemstack.getItem())) {
+            if (!flag1) {
+                enuminteractionresult = iblockdata.interact(world, entityhuman, enumhand, movingobjectpositionblock) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.FAIL;
+            }
+
+            if (!itemstack.isEmpty() && enuminteractionresult != EnumInteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
                 ItemActionContext itemactioncontext = new ItemActionContext(entityhuman, enumhand, movingobjectpositionblock);
 
                 if (this.isCreative()) {
                     int i = itemstack.getCount();
-                    EnumInteractionResult enuminteractionresult = itemstack.placeItem(itemactioncontext);
+                    enuminteractionresult = itemstack.placeItem(itemactioncontext, enumhand);
 
                     itemstack.setCount(i);
                     return enuminteractionresult;
                 } else {
-                    return itemstack.placeItem(itemactioncontext);
+                    return itemstack.placeItem(itemactioncontext, enumhand);
                 }
-            } else {
-                return EnumInteractionResult.PASS;
             }
         }
+        return enuminteractionresult;
+        // CraftBukkit end
     }
 
     public void a(WorldServer worldserver) {
